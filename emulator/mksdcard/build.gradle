apply plugin: 'c'
apply plugin: 'sdk-files'

executables {
    mksdcard {}
}

sources {
    mksdcard {
        c {
            source {
                srcDir "src/source"
                include "**/*.c"
            }
        }
    }
}

model {
    platforms {
        linux {
            architecture "i386"
            operatingSystem "linux"
        }
        darwin {
            architecture "i386"
            operatingSystem "osx"
        }
        windows {
            architecture "i386"
            operatingSystem "windows"
        }
    }

    toolChains {
        host(Clang)
        mingw(Gcc) {
//            path "$project.rootDir/../prebuilts/gcc/linux-x86/host/i586-mingw32msvc-4.8/bin"

            addPlatformConfiguration(new MingwOnLinuxConfiguration(project))

            getCCompiler().executable =         'i586-mingw32msvc-gcc'
            getCppCompiler().executable =       'i586-mingw32msvc-g++'
            getLinker().executable =            'i586-mingw32msvc-gcc'
            getAssembler().executable =         'i586-mingw32msvc-as'
            getStaticLibArchiver().executable = 'i586-mingw32msvc-ar'
        }
    }
}

sdk {
    mac {
        item( { getExeName("darwin") } ) {
            executable true
            builtBy 'darwinMksdcardExecutable'
        }
    }
    linux {
        item( { getExeName("linux") } ) {
            executable true
            builtBy 'linuxMksdcardExecutable'
        }
    }
    windows {
        item( { getExeName("windows") } ) {
            name 'mksdcard.exe'
            builtBy 'windowsMksdcardExecutable'
        }
    }
}

def getExeName(String platform) {
    // binaries will return a set of binaries
    def binaries = executables.mksdcard.binaries.matching { it.name == "${platform}MksdcardExecutable" }
    // calling .exeFile on the set returns an array with the result from each item in the set...
    return binaries.executableFile.get(0)
}

class MingwOnLinuxConfiguration implements TargetPlatformConfiguration {

    Project project

    MingwOnLinuxConfiguration(Project project) {
        this.project = project
    }
    boolean supportsPlatform(Platform element) {
        return element.getOperatingSystem().name == "windows"
    }

    List<String> getCppCompilerArgs() {
        []
    }

    List<String> getCCompilerArgs() {
        ['-DUSE_MINGW', '-D__STDC_FORMAT_MACROS', '-D__STDC_CONSTANT_MACROS', '-D__USE_MINGW_ANSI_STDIO']
    }

    List<String> getObjectiveCCompilerArgs() {
        []
    }

    List<String> getObjectiveCppCompilerArgs() {
        []
    }

    List<String> getAssemblerArgs() {
        []
    }

    List<String> getLinkerArgs() {
        ['-enable-stdcall-fixup']
    }

    List<String> getStaticLibraryArchiverArgs() {
        []
    }
}
